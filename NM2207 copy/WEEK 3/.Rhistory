# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade, state, homeownership, disbursement_method )
# View the columns stacked one below another
glimpse(loans)
# Compute the mean of the number of cats: execute this command
mean.default(cat_lovers$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean.default(cat_lovers$number_of_cats)
# Compute the mean of the number of cats: execute this command
mean.default(cat_lovers$number_of_cats)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean.default(cat_lovers$number_of_cats)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv(cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
library(readr)
cat_lovers <- read_csv("cat-lovers.csv")
View(cat_lovers)
knitr::opts_chunk$set(echo = TRUE)
# Method 3
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=10,by=3)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=10,by=2)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=10,by=1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1L,to=10L,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# import the cat-lovers data from the csv file you downloaded from canvas
'cat_lovers' <- read_csv("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
?read_csv
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
# Method 4
x <- seq(from=1,to=5,by=1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x <- seq(from=1L,to=5L,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
library(readr)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Install package
# Load the package
# Load package
setwd("~/Downloads/NM2207/WEEK 3")
setwd("~/Downloads/NM2207/WEEK 3")
install.packages("openintro")
setwd("~/Downloads/NM2207/WEEK 3")
install.packages("openintro")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
setwd("~/Downloads/NM2207/WEEK 3")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
$ export LANG=en_US.UTF-8
$ export LANG=en_US.UTF-8
knitr::opts_chunk$set(echo = TRUE)
# Load package tidyverse
setwd("~/Downloads/NM2207/WEEK 3")
# Load package tidyverse
library(tidyverse)
setwd("~/Downloads/NM2207/WEEK 3")
install.packages("openintro")
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
setwd("~/Downloads/NM2207/WEEK 3")
install.packages("openintro", repos="http://cran.us.r-project.org")
install.packages("openintro", repos = "http://cran.us.r-project.org")
setwd("~/Downloads/NM2207/WEEK 3")
`install.packages("openintro", repos="http://cran.us.r-project.org")`
install.packages("openintro", repos="http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
# Install package
# Load the package
library(openintro)
# Load package
library(tidyverse)
setwd("~/Downloads/NM2207/WEEK 3")
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
is.datatype(#yes)
# Enter code here
is.datatype(#)
# Enter code here
ages(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
# Enter code here
ages <- c(25,30,22,28,33)
print(x)
# Enter code here
ages <- c(25,30,22,28,33)
print(ages)
# Enter code here
student_info <- c(Alice, Bob, Catherine)
# Enter code here
student_info <- c(Alice, Bob, Catherine)
# Enter code here
student_info = (Alice, Bob, Catherine)
# Enter code here
student_info<-list(Alice, Bob, Catherine)
# Enter code here
student_info<-list(Alice, Bob, Catherine)
# Enter code here
student_info <- c(Alice, Bob, Catherine)
# Enter code here
student_info <- c( Alice, Bob, Catherine)
# Enter code here
student_info =list( 'Alice', 'Bob', 'Catherine')
print(student_info)
# Enter code here
student_info =list( 'Alice'=85, 'Bob', 'Catherine')
print(student_info)
# Enter code here
student_info =list( 'Alice'=85, 'Bob'=92, 'Catherine'=78)
print(student_info)
# Enter code here
student_info =list( 'Alice'=85=TRUE, 'Bob'=92=TRUE, 'Catherine'=78=FALSE)
# Enter code here
student_info =list( 'Alice'=85= TRUE, 'Bob'=92=TRUE, 'Catherine'=78=FALSE)
# Enter code here
student_info =list( 'Alice'=85= TRUE, 'Bob'=92= TRUE, 'Catherine'=78= FALSE)
# Enter code here
student_info =list( 'Alice'=85=is student_info, 'Bob'=92=is student_info, 'Catherine'=78=is_not_ student_info)
# Enter code here
student_info =list( 'Alice'=85,is student_info, 'Bob'=92=is student_info, 'Catherine'=78=is_not_ student_info)
# Enter code here
student_info =list( 'Alice'=85, 'Bob'=92, 'Catherine'=78)
print(student_info)
# Enter code here
student_info <- c('Alice','Bob','Catherine')
print(student_info)
# Enter code here
student_info =list(name=c('Alice','Bob','Catherine'),score=c(85,92,78),passed=c(TRUE, TRUE, FALSE)
print(student_info)
# Enter code here
student_info<- list(name=c('Alice','Bob','Catherine'),score=c(85,92,78),passed=c(TRUE, TRUE, FALSE)
print(student_info)
# Enter code here
student_info <- list(name=c('Alice','Bob','Catherine'),score=c(85,92,78),passed=c(TRUE, TRUE, FALSE)
print(student_info)
# Enter code here
student_info <- list(name=c('Alice','Bob','Catherine'),score=c(85,92,78),passed=c(TRUE, TRUE, FALSE))
print(student_info)
# Enter code here
typeof(data)
# Enter code here
x <- c(10,15.5,20,TRUE)
typeof(x)
# Enter code here
x <- c(10)
typeof(x)
x <- c(15.5)
typeof(x)
x <- c(20)
typeof(x)
x <- c(TRUE)
typeof(x)
# Enter code here
prices <- c(20.5,15,'25')
prices <- as.numeric(prices)
# Enter code here
prices <- c(20.5,15,'25')
prices <- as.numeric(prices)
typeof(prices)
# Enter code here
x <- c(5,10,15)
typeof(x)
# Enter code here
x <- c(5,10,15)
typeof(x)
x <- c(5,'apple'),(10,'banana'),(15,'cherry')
# Enter code here
x <- c(5,10,15)
typeof(x)
x <- c(5,'apple'),(10,'banana'),(15,'cherry'
# Enter code here
x <- c(5,10,15),c("apple", "banana", "cherry")
# Enter code here
x <- c((5,10,15),c("apple", "banana", "cherry"))
# Enter code here
x <- c(5,10,15),c("apple", "banana", "cherry")
# Enter code here
x <- (c(5,10,15),c("apple", "banana", "cherry"))
# Enter code here
x <- c(5,10,15,"apple", "banana", "cherry")
typeof(x)
# Enter code here
x <- c(5,10,15,"apple", "banana", "cherry")
print(x)
# Enter code here
numbers <- c(7, 12.5, "15.7")
numbers <- as.numeric(numbers)
# Enter code here
numbers <- c(7, 12.5, "15.7")
numbers <- as.numeric(numbers)
print(numbers)
# Enter code here
numbers <- c(7, 12.5, "15.7")
numbers <- as.numeric(numbers)
sum(numbers)
# Enter code here
mean(85, 90.5,"75.2")
# Enter code here
grades <- c(85, 90.5,"75.2")
mean(grades)
# Enter code here
grades <- c(85.0, 90.5,75.2)
mean(grades)
# Enter code here
mixed_data <- list(numeric=c(10, 20, 30),character=c("red", "green", "blue"),logical=c(TRUE, FALSE, TRUE))
print(mixed_data)
# Enter code here
mixed_data <- list(numeric=c(10, 20, 30),character=c("red", "green", "blue"),logical=c(TRUE, FALSE, TRUE))
print(mixed_data)
mean(mixed_data)
# Enter code here
mixed_data <- list(numeric=c(10, 20, 30),character=c("red", "green", "blue"),logical=c(TRUE, FALSE, TRUE))
print(mixed_data)
mean(numeric)
mixed_data$numeric
mean(mixed_data$numeric)
mean(mixed_data[[1]])
# Enter code here
mixed_data <- list(first=c(10, 20, 30),second=c("red", "green", "blue"),third=c(TRUE, FALSE, TRUE))
print(mixed_data)
mean(mixed_data[[1]])
# Enter code here
student_info$score
# Enter code here
student_info$score
print(bob)
# Enter code here
student_info$score[2]
# Enter code here
x<-c(2,6,3,7,3,6,7,7,8,9,2,4,3)
# Enter code here
x<-c(2,6,3,7,3,6,7,7,8,9,2,4,3)
print(last)
# Enter code here
x<-c(2,6,3,7,3,6,7,7,8,9,2,4,3)
print(`length<-`(last))
# Enter code here
x<-c(2,6,3,7,3,6,7,7,8,9,2,4,3)
last_element <- x[length(x)]
print(last_element)
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
x_indices <- which(words == "apple")
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
x <- which(words == "apple")
print(x)
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
apple_indices <- which(words == "apple")
print(apple_indices)
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
words=="apple"
which(apple_indices)
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
words=="apple"
which(apple)
# Enter code here
x<- c("apple", "banana", "cherry", "apple")
words=="apple"
which(words=="apple")
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
words=="apple"
which(words=="apple")
# Enter code here
ages <- c(25, 40, 18, 50, 32, 28, 60)
older_than_30 <- ages[ages > 30]
# Enter code here
ages <- c(25, 40, 18, 50, 32, 28, 60)
older_than_30 <- ages[ages > 30]
ages$older_than_30
# Enter code here
ages <- c(25, 40, 18, 50, 32, 28, 60)
older_than_30 <- ages[ages > 30]
ages$older_than_30
# Enter code here
ages <- c(25, 40, 18, 50, 32, 28, 60)
ages[ages > 30]
# Enter code here
x[1:20]
# Enter code here
x <- 1:20
x <-seq(from=1,to=20,by=3)
# Enter code here
x <- 1:20
x <-seq(from=1,to=20,by=3)
# Enter code here
x <- 1:20
x <-seq(from=1,to=20,by=3)
print(x)
# Enter code here
x<-1:10
x<-seq(from=4,to=8,by=1)
# Enter code here
x<-1:10
x<-seq(from=4,to=8,by=1)
print(x)
# Enter code here
x <- c(10, NA, 15, 20)
check(missing([2]))
# Enter code here
x <- c(10, NA, 15, 20)
x == [2]
# Enter code here
x <- c(10, NA, 15, 20)
which(x== [2])
# Enter code here
x <- c(10, NA, 15, 20)
which(x=[2])
?is.na
# Enter code here
x <- c(10, NA, 15, 20)
is.na(x)
# Enter code here
daily temperatures <- c(90,40,60,80,100,120,240,260)
# Enter code here
daily_temperatures <- c(90,40,60,80,100,120,240,260)
# Enter code here
daily_temperatures <- c(90,40,60,80,100,120,240,260)
daily_temperatures <- TRUE
# Enter code here
daily_temperatures <- c(90,40,60,80,100,120,240,260)
daily_temperatures <- TRUE
print(daily_temperatures)
# Enter code here
temperatures <- c(90,40,60,80,100,120,240,260)
hot_days <- temperatures > 90
total_hot_days <- sum(hot_days)
cat("Total number of hot days:", total_hot_days)
?cat
# Enter code here
fruits <- c("apple", "banana", "strawberry", "kiwi", "orange", "grape")
long_names <- nchar(fruits) > 6
long_fruit_names <- fruits[long_names]
cat("Fruits with names longer than 6 characters:", long_fruit_names)
# Enter code here
fruits <- c("apple", "banana", "strawberry", "watermelon", "orange", "grape")
long_names <- nchar(fruits) > 6
long_fruit_names <- fruits[long_names]
cat("Fruits with names longer than 6 characters:", long_fruit_names)
# Enter code here
numbers <- c(10, 23, 30, 42, 55, 68, 75, 88, 95)
divisible_by_5 <- numbers %% 5 == 0
divisible_numbers <- numbers[divisible_by_5]
cat("Numbers divisible by 5:", divisible_numbers)
# Enter code here
vector1 <- c(5, 10, 15, 20, 25, 66)
vector2 <- c(3, 12, 10, 18, 23, 72)
comparison <- vector1 > vector2
cat("Comparison results:", comparison)
# Enter code here
vector1 <- c(5, 10, 15, 20, 25, 66)
vector2 <- c(3, 12, 10, 18, 23, 72)
comparison <- vector1 > vector2
print(comparison)
# Enter code here
numbers <- c(10, 23, 30, 42, 55, 68, 75, 88, 95)
divisible_by_5 <- numbers %% 5 == 0
divisible_numbers <- numbers[divisible_by_5]
print(divisible_numbers)
setwd("~/Downloads/NM2207/WEEK 4")
